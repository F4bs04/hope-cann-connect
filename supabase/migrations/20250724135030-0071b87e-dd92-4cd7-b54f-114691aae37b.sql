-- CRITICAL SECURITY FIXES - Phase 1: Enable RLS on unprotected tables

-- Enable RLS on tables that currently have RLS disabled
ALTER TABLE public.clinic_users ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.consultas ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.usuarios ENABLE ROW LEVEL SECURITY;

-- Create admins table if it doesn't exist
CREATE TABLE IF NOT EXISTS public.admins (
  id bigint PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
  id_usuario bigint REFERENCES public.usuarios(id) ON DELETE CASCADE,
  nome text NOT NULL,
  cargo text NOT NULL DEFAULT 'admin',
  permissoes json NOT NULL DEFAULT '["manage_doctors", "view_all_data", "manage_system"]'::json,
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now()
);

-- Enable RLS on admins table
ALTER TABLE public.admins ENABLE ROW LEVEL SECURITY;

-- Create basic admin policies
CREATE POLICY "Admins can view their own data" ON public.admins
FOR SELECT USING (
  id_usuario = (
    SELECT id FROM public.usuarios 
    WHERE email = auth.email()
  )
);

-- Drop the most dangerous overly permissive policies
DROP POLICY IF EXISTS "Allow all operations on consultas" ON public.consultas;
DROP POLICY IF EXISTS "Allow all operations on medicos" ON public.medicos;
DROP POLICY IF EXISTS "Allow all operations on pacientes" ON public.pacientes;
DROP POLICY IF EXISTS "Allow all operations on schedules" ON public.horarios_disponiveis;

-- Add secure basic policies for consultas
CREATE POLICY "Medicos can view their consultations" ON public.consultas
FOR SELECT USING (
  id_medico IN (
    SELECT id FROM public.medicos 
    WHERE id_usuario = (
      SELECT id FROM public.usuarios 
      WHERE email = auth.email()
    )
  )
);

CREATE POLICY "Pacientes can view their consultations" ON public.consultas
FOR SELECT USING (
  id_paciente IN (
    SELECT id FROM public.pacientes 
    WHERE id_usuario = (
      SELECT id FROM public.usuarios 
      WHERE email = auth.email()
    )
  )
);

-- Secure medicos table - only show approved doctors to public
CREATE POLICY "Anyone can view approved medicos" ON public.medicos
FOR SELECT USING (aprovado = true);

CREATE POLICY "Medicos can view their own profile" ON public.medicos
FOR SELECT USING (
  id_usuario = (
    SELECT id FROM public.usuarios 
    WHERE email = auth.email()
  )
);

-- Secure pacientes table
CREATE POLICY "Pacientes can view their own data" ON public.pacientes
FOR SELECT USING (
  id_usuario = (
    SELECT id FROM public.usuarios 
    WHERE email = auth.email()
  )
);

-- Fix existing functions with search_path protection
CREATE OR REPLACE FUNCTION public.update_updated_at_column()
RETURNS trigger
LANGUAGE plpgsql
SET search_path = public, pg_temp
AS $function$
BEGIN
  NEW.updated_at = now();
  RETURN NEW;
END;
$function$;

CREATE OR REPLACE FUNCTION public.hash_password()
RETURNS trigger
LANGUAGE plpgsql
SET search_path = public, pg_temp
AS $function$
BEGIN
  IF NEW.senha_hash IS NOT NULL THEN
    NEW.senha_hash = crypt(NEW.senha_hash, gen_salt('bf'));
  END IF;
  RETURN NEW;
END;
$function$;

CREATE OR REPLACE FUNCTION public.hash_clinic_password()
RETURNS trigger
LANGUAGE plpgsql
SET search_path = public, pg_temp
AS $function$
BEGIN
  IF NEW.senha_hash IS NOT NULL THEN
    NEW.senha_hash = crypt(NEW.senha_hash, gen_salt('bf'));
  END IF;
  RETURN NEW;
END;
$function$;