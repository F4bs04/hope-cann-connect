import { supabase } from '@/integrations/supabase/client';

interface AuthDiagnosticResult {
  issue: string;
  severity: 'CRITICAL' | 'HIGH' | 'MEDIUM' | 'LOW';
  description: string;
  solution: string;
}

export class AuthDiagnostics {
  static async runDiagnostics(): Promise<AuthDiagnosticResult[]> {
    const issues: AuthDiagnosticResult[] = [];

    // 1. Verificar usu√°rios m√©dicos √≥rf√£os
    try {
      const { data: orphanMedicos } = await supabase
        .from('usuarios')
        .select(`
          id, email, tipo_usuario,
          medicos!left(id, nome, aprovado)
        `)
        .eq('tipo_usuario', 'medico');

      orphanMedicos?.forEach(usuario => {
        if (!usuario.medicos || usuario.medicos.length === 0) {
          issues.push({
            issue: 'MEDICO_ORFAO',
            severity: 'CRITICAL',
            description: `Usu√°rio m√©dico ${usuario.email} (ID: ${usuario.id}) n√£o possui registro na tabela medicos`,
            solution: 'Criar registro m√©dico ou alterar tipo_usuario para paciente'
          });
        }
      });
    } catch (error) {
      issues.push({
        issue: 'QUERY_ERROR',
        severity: 'HIGH',
        description: 'Erro ao verificar usu√°rios m√©dicos √≥rf√£os',
        solution: 'Verificar permiss√µes RLS e estrutura da query'
      });
    }

    // 2. Verificar usu√°rios pacientes √≥rf√£os
    try {
      const { data: orphanPacientes } = await supabase
        .from('usuarios')
        .select(`
          id, email, tipo_usuario,
          pacientes!left(id, nome)
        `)
        .eq('tipo_usuario', 'paciente');

      orphanPacientes?.forEach(usuario => {
        if (!usuario.pacientes || usuario.pacientes.length === 0) {
          issues.push({
            issue: 'PACIENTE_ORFAO',
            severity: 'HIGH',
            description: `Usu√°rio paciente ${usuario.email} (ID: ${usuario.id}) n√£o possui registro na tabela pacientes`,
            solution: 'Criar registro paciente ou corrigir tipo_usuario'
          });
        }
      });
    } catch (error) {
      issues.push({
        issue: 'QUERY_ERROR',
        severity: 'HIGH',
        description: 'Erro ao verificar usu√°rios pacientes √≥rf√£os',
        solution: 'Verificar permiss√µes RLS e estrutura da query'
      });
    }

    // 3. Verificar m√©dicos n√£o aprovados
    try {
      const { data: unapprovedMedicos } = await supabase
        .from('medicos')
        .select('id, nome, aprovado, id_usuario')
        .eq('aprovado', false);

      if (unapprovedMedicos && unapprovedMedicos.length > 0) {
        issues.push({
          issue: 'MEDICOS_NAO_APROVADOS',
          severity: 'MEDIUM',
          description: `${unapprovedMedicos.length} m√©dicos n√£o aprovados encontrados`,
          solution: 'Implementar fluxo de aprova√ß√£o de m√©dicos na √°rea administrativa'
        });
      }
    } catch (error) {
      issues.push({
        issue: 'QUERY_ERROR',
        severity: 'HIGH',
        description: 'Erro ao verificar m√©dicos n√£o aprovados',
        solution: 'Verificar permiss√µes RLS'
      });
    }

    // 4. Verificar inconsist√™ncias de tipos de usu√°rio
    try {
      const { data: allUsers } = await supabase
        .from('usuarios')
        .select('tipo_usuario');

      const userTypes = allUsers?.map(u => u.tipo_usuario) || [];
      const invalidTypes = userTypes.filter(type => 
        !['medico', 'paciente', 'admin_clinica'].includes(type)
      );

      if (invalidTypes.length > 0) {
        issues.push({
          issue: 'TIPOS_USUARIO_INVALIDOS',
          severity: 'HIGH',
          description: `Tipos de usu√°rio inv√°lidos encontrados: ${[...new Set(invalidTypes)].join(', ')}`,
          solution: 'Normalizar tipos de usu√°rio para: medico, paciente, admin_clinica'
        });
      }
    } catch (error) {
      issues.push({
        issue: 'QUERY_ERROR',
        severity: 'HIGH',
        description: 'Erro ao verificar tipos de usu√°rio',
        solution: 'Verificar permiss√µes RLS'
      });
    }

    // 5. Verificar cl√≠nicas sem admin
    try {
      const { data: clinicas } = await supabase
        .from('clinicas')
        .select('id, nome, email');

      const { data: usuarios } = await supabase
        .from('usuarios')
        .select('email')
        .eq('tipo_usuario', 'admin_clinica');

      const clinicasEmails = clinicas?.map(c => c.email) || [];
      const adminEmails = usuarios?.map(u => u.email) || [];

      clinicas?.forEach(clinica => {
        if (!adminEmails.includes(clinica.email)) {
          issues.push({
            issue: 'CLINICA_SEM_ADMIN',
            severity: 'MEDIUM',
            description: `Cl√≠nica ${clinica.nome} (${clinica.email}) n√£o possui usu√°rio admin_clinica correspondente`,
            solution: 'Criar usu√°rio admin_clinica ou ajustar sistema de autentica√ß√£o de cl√≠nicas'
          });
        }
      });
    } catch (error) {
      issues.push({
        issue: 'QUERY_ERROR',
        severity: 'HIGH',
        description: 'Erro ao verificar cl√≠nicas sem admin',
        solution: 'Verificar permiss√µes RLS'
      });
    }

    return issues;
  }

  static generateReport(issues: AuthDiagnosticResult[]): string {
    if (issues.length === 0) {
      return '‚úÖ DIAGN√ìSTICO COMPLETO: Nenhum problema de autentica√ß√£o encontrado.';
    }

    const critical = issues.filter(i => i.severity === 'CRITICAL');
    const high = issues.filter(i => i.severity === 'HIGH');
    const medium = issues.filter(i => i.severity === 'MEDIUM');
    const low = issues.filter(i => i.severity === 'LOW');

    let report = 'üîç RELAT√ìRIO DE DIAGN√ìSTICO DE AUTENTICA√á√ÉO\n\n';
    
    if (critical.length > 0) {
      report += 'üö® CR√çTICOS:\n';
      critical.forEach(issue => {
        report += `- ${issue.description}\n  Solu√ß√£o: ${issue.solution}\n\n`;
      });
    }

    if (high.length > 0) {
      report += '‚ö†Ô∏è ALTA PRIORIDADE:\n';
      high.forEach(issue => {
        report += `- ${issue.description}\n  Solu√ß√£o: ${issue.solution}\n\n`;
      });
    }

    if (medium.length > 0) {
      report += 'üîî M√âDIA PRIORIDADE:\n';
      medium.forEach(issue => {
        report += `- ${issue.description}\n  Solu√ß√£o: ${issue.solution}\n\n`;
      });
    }

    if (low.length > 0) {
      report += '‚ÑπÔ∏è BAIXA PRIORIDADE:\n';
      low.forEach(issue => {
        report += `- ${issue.description}\n  Solu√ß√£o: ${issue.solution}\n\n`;
      });
    }

    return report;
  }
}